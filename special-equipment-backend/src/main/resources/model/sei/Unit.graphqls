type Unit{
    id:ID!
    name: String!
    address: String
    linkMen: String
    phone: String
    owns: [EQP]
    maints: [EQP]
}
type UnitEs{
    id:ID!
    name: String!
    address: String
    linkMen: String
    phone: String
}
type CompanyEs{
    id:ID!
    name: String!
    no: String
    address: String
    linkMen: String
    phone: String
}
type PersonEs{
    id:ID!
    name: String!
    no: String
    gender: String
    address: String
    phone: String
    occupation: String
}

extend type Query {
    findAllUnits: [Unit]!
    findUnitbyName(name: String!): [UnitEs]!
    findUnitbyName1(name: String!): [UnitEs]!
    findUnitbyName2(name: String!): [UnitEs]!
    findUnitbyNameAnd(name: String!, name2:String): [UnitEs]!
    findUnitbyNameAnd2(name: String!, name2:String): [UnitEs]!
    findUnitbyNameArr(names: [String]): [UnitEs]!
    getUnitbyFilter(as: UnitCommonInput): [UnitEs]!
    getCompanyEsbyFilter(as: UnitCommonInput): [CompanyEs]!
    getPersonEsbyFilter(as: UnitCommonInput): [PersonEs]!
}

extend type Mutation {
    newUnit(name: String!, address: String) : Unit!
    newUnitCompany(unit: UnitCommonInput!, id: ID) : Unit!
    newUnitPerson(unit: UnitCommonInput!, id: ID) : Unit!
}

