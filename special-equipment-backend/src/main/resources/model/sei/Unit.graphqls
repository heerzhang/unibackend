type Unit{
    id:ID!
    name: String
    address: String
    linkMen: String
    phone: String
    owns: [Eqp]
    maints: [Eqp]
    company: Company
    person: Person
}
type CompanyEs{
    id:ID!
    name: String!
    no: String
    address: String
    linkMen: String
    phone: String
}
type PersonEs{
    id:ID!
    name: String!
    no: String
    gender: String
    address: String
    phone: String
    occupation: String
}
type Company{
    id:ID!
    name: String!
    no: String
    address: String
    linkMen: String
    phone: String
}
type Person{
    id:ID!
    name: String!
    no: String
    gender: String
    address: String
    phone: String
    occupation: String
}

union UnitEs= CompanyEs | PersonEs

extend type Query {
    findAllUnits: [Unit]!
    findUnitbyName(name: String!): [CompanyEs]!
    findUnitbyName1(name: String!): [CompanyEs]!
    findUnitbyName2(name: String!): [PersonEs]!
    findUnitbyNameAnd(name: String!, name2:String): [CompanyEs]!
    findUnitbyNameAnd2(name: String!, name2:String): [CompanyEs]!
    findUnitbyNameArr(names: [String]): [CompanyEs]!
    getUnitbyFilter(as: UnitCommonInput): [CompanyEs]!
    #getCompanyEsbyFilter(as: UnitCommonInput): [CompanyEs]!
    #getPersonEsbyFilter(as: UnitCommonInput): [PersonEs]!
    getUnitEsFilter(as: UnitCommonInput, offset:Int, limit:Int, orderBy:String, asc:Boolean): [UnitEs]!
    getUnit(esid: ID,company:Boolean): Unit
    unit(id: ID): Unit
}

extend type Mutation {
    newUnit(name: String!, address: String) : Unit!
    newUnitCompany(unit: UnitCommonInput!, id: ID) : Unit!
    newUnitPerson(unit: UnitCommonInput!, id: ID) : Unit!
    newUnitExternalSource(unit: UnitCommonInput!) : Unit!
    syncUnitFromOld(offset:Int, limit:Int): [String]!
}

